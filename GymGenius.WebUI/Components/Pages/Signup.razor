@page "/signup"
@using Gymgenius.bo
@using GymGenius.BO
@using GymGenius.WebUI.Services
@inject ApiService ApiService
@inject NavigationManager Navigation

<h3>Sign Up</h3>

<EditForm Model="user" OnValidSubmit="HandleValidSubmit" FormName="signUpForm">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="mb-3">
        <label for="userName" class="form-label">Username</label>
        <InputText id="userName" class="form-control" @bind-Value="user.UserName" />
    </div>

    <div class="mb-3">
        <label for="firstName" class="form-label">First Name</label>
        <InputText id="firstName" class="form-control" @bind-Value="user.FirstName" />
    </div>

    <div class="mb-3">
        <label for="lastName" class="form-label">Last Name</label>
        <InputText id="lastName" class="form-control" @bind-Value="user.LastName" />
    </div>

    <div class="mb-3">
        <label for="age" class="form-label">Age</label>
        <InputNumber id="age" class="form-control" @bind-Value="user.Age" />
    </div>

    <div class="mb-3">
        <label for="email" class="form-label">Email</label>
        <InputText id="email" type="email" class="form-control" @bind-Value="user.Email" />
    </div>

    <div class="mb-3">
        <label for="password" class="form-label">Password</label>
        <InputText id="password" type="password" class="form-control" @bind-Value="user.Password" />
    </div>

    <div class="mb-3">
        <label for="role" class="form-label">Role</label>
        <select id="role" class="form-control" @bind="@user.RoleId">
            @if (roles != null)
            {
                @foreach (var role in roles)
                {
                    <option value="@role.RoleId">@role.RoleName</option>
                }
            }
        </select>
    </div>

    <button type="submit" class="btn btn-primary">Sign Up</button>
</EditForm>

@if (_signUpSuccess)
{
    <div class="alert alert-success mt-3">Signup successful! Redirecting to login...</div>
}

@code {
    [SupplyParameterFromForm] public User? user { get; set; }
    private bool _signUpSuccess;
    private List<Role>? roles;
    protected override async Task OnInitializedAsync()
    {
        user ??= new();
        user.RoleId = 1;
        roles = await ApiService.GetRolesAsync();
    }

	private async Task HandleValidSubmit()
    {
        try
        {
            await ApiService.SignupAsync(user);
            _signUpSuccess = true;
            await Task.Delay(2000); // wait for 2 seconds
            Navigation.NavigateTo("/login");
        }
        catch (Exception ex)
        {
            // Handle the error
            Console.WriteLine($"Signup failed: {ex.Message}");
        }
    }
}